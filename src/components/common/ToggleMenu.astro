---
export interface Props {
  label?: string;
  class?: string;
}

const {
  label = 'Toggle Menu',
  class: className = 'flex flex-col h-12 w-12 rounded justify-center items-center cursor-pointer group',
} = Astro.props;
---

<button type="button" class={className} aria-label={label} data-aw-toggle-menu>
  <span class="sr-only">{label}</span>
  <slot>
    <span
      aria-hidden="true"
      class="h-0.5 w-6 my-1 rounded-full bg-black dark:bg-white transition ease transform duration-200 opacity-80 group-[.expanded]:rotate-45 group-[.expanded]:translate-y-2.5"
    ></span>
    <span
      aria-hidden="true"
      class="h-0.5 w-6 my-1 rounded-full bg-black dark:bg-white transition ease transform duration-200 opacity-80 group-[.expanded]:opacity-0"
    ></span>
    <span
      aria-hidden="true"
      class="h-0.5 w-6 my-1 rounded-full bg-black dark:bg-white transition ease transform duration-200 opacity-80 group-[.expanded]:-rotate-45 group-[.expanded]:-translate-y-2.5"
    ></span>
  </slot>
</button>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleMenuBtn = document.querySelector('[data-aw-toggle-menu]');
    const menu = document.querySelector('#nav-menu');

    if (!toggleMenuBtn || !menu) {
      return;
    }

    const openMenu = () => {
      document.body.classList.add('menu-open');
      toggleMenuBtn.classList.add('expanded');
      toggleMenuBtn.setAttribute('aria-expanded', 'true');
      menu.classList.remove('hidden');
    };

    const closeMenu = () => {
      document.body.classList.remove('menu-open');
      toggleMenuBtn.classList.remove('expanded');
      toggleMenuBtn.setAttribute('aria-expanded', 'false');
      menu.classList.add('hidden');
    };

    toggleMenuBtn.addEventListener('click', () => {
      if (document.body.classList.contains('menu-open')) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    document.addEventListener('click', (event) => {
      if (!document.body.classList.contains('menu-open')) {
        return;
      }

      // FIX: Cast event.target to Node to resolve TypeScript error
      const isClickInsideMenu = menu.contains(event.target as Node);
      const isClickOnToggleButton = toggleMenuBtn.contains(event.target as Node);

      if (!isClickInsideMenu && !isClickOnToggleButton) {
        closeMenu();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (document.body.classList.contains('menu-open') && event.key === 'Escape') {
        closeMenu();
      }
    });
  });
</script>

<style is:global>
  /* Prevent scrolling when the menu is open */
  body.menu-open {
    overflow: hidden;
  }
</style>
